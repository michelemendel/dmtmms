package view

import (
	"github.com/michelemendel/dmtmms/constants"
	"github.com/michelemendel/dmtmms/entity"
)

templ (vctx *ViewCtx) Families(families []entity.Family, selectedFamily entity.Family, op string) {
	if ctx.Value(constants.CTX_IS_XHR_KEY).(bool) {
		@vctx.FamiliesPage(families, selectedFamily, op)
	} else {
		@vctx.AppRoot("") {
			@vctx.FamiliesPage(families, selectedFamily, op)
		}
	}
}

templ (vctx *ViewCtx) FamiliesPage(families []entity.Family, selectedFamily entity.Family, op string) {
	<div id="families">
		<div class="px-4 py-5">
			<div class="min-w-2/3">
				@vctx.FamilyForm(selectedFamily, op)
			</div>
			<div class="pt-2">
				@vctx.FamilyTable(families, selectedFamily)
			</div>
		</div>
		@vctx.Footer()
	</div>
}

//--------------------------------------------------------------------------------
// Family table
templ (vctx *ViewCtx) FamilyTable(families []entity.Family, selectedFamily entity.Family) {
	<div class="flex flex-grow overflow-auto flex-col max-h-[50rem]">
		<table class="w-1/2 text-left text-sm font-light">
			// Table header
			<thead class="border-1 font-medium dark:border-neutral-500">
				<tr class="sticky top-0 px-6 py-2 text-slate-200 bg-slate-500">
					<th scope="col" class="px-6 py-2 text-slate-200 bg-slate-500">Family name</th>
					<th scope="col" class="py-2 text-slate-200 bg-slate-500"></th>
					<th scope="col" class="py-2 text-slate-200 bg-slate-500"></th>
				</tr>
			</thead>
			// Table body
			<tbody>
				for _, family := range families {
					@vctx.familyTableRow(family, selectedFamily)
				}
			</tbody>
		</table>
	</div>
}

templ (vctx *ViewCtx) familyTableRow(family entity.Family, selectedFamily entity.Family) {
	<tr
		class="border-b dark:border-neutral-500 hover:bg-neutral-100"
	>
		<td class="whitespace-nowrap px-6 py-4">{ family.Name }</td>
		// Update family
		<td
			hx-get={ constants.ROUTE_FAMILY_UPDATE + "/" + family.UUID }
			hx-target="#families"
			hx-select="#families"
			hx-swap="outerHTML"
			class="w-3 font-medium cursor-pointer whitespace-nowrap py-4"
		>
			<span class="[&>svg]:w-5">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10"></path>
				</svg>
			</span>
		</td>
		if vctx.ViewError.Err != nil && vctx.ViewError.ErrType == ErrTypeOnDelete && selectedFamily.UUID == family.UUID {
			// Delete error
			<td>
				<div class="mb-4">
					<div class="block text-red-600 ml-2 w-48 text-xs text-wrap">
						<p>
							{ vctx.ViewError.Err.Error() }
						</p>
					</div>
				</div>
			</td>
		} else {
			// Delete family
			<td
				id={ "delete-" + family.UUID }
				hx-delete={ constants.ROUTE_FAMILY_DELETE + "/" + family.UUID }
				hx-target="#families"
				hx-select="#families"
				hx-swap="outerHTML"
				hx-trigger="confirmed"
				onClick={ familyDeleteConfirm(family.UUID) }
				class="w-3 font-medium cursor-pointer whitespace-nowrap pl-2 py-4"
			>
				<span class="[&>svg]:w-5">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
						<path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0"></path>
					</svg>
				</span>
			</td>
		}
	</tr>
}

//--------------------------------------------------------------------------------
// Family form
templ (vctx *ViewCtx) FamilyForm(selectedFamily entity.Family, op string) {
	<form
		if op == constants.OP_CREATE {
			hx-post={ constants.ROUTE_FAMILY_CREATE }
		} else {
			hx-put={ constants.ROUTE_FAMILY_UPDATE }
		}
		hx-target="#families"
		hx-select="#families"
		hx-swap="outerHTML"
	>
		<div class="flex flex-row">
			// UUID
			<input type="hidden" name="uuid" value={ selectedFamily.UUID }/>
			// Family name
			<div class="relative">
				@Input("name", selectedFamily.Name, "name", "name", true, false)
			</div>
			// Submit
			<button
				type="submit"
				data-te-ripple-init
				class="ml-2 inline-block rounded bg-primary px-4 pb-[5px] pt-[6px] text-xs font-medium uppercase leading-normal text-white shadow-[0_4px_9px_-4px_#3b71ca] transition duration-150 ease-in-out hover:bg-primary-600 hover:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] focus:bg-primary-600 focus:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] focus:outline-none focus:ring-0 active:bg-primary-700 active:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] dark:shadow-[0_4px_9px_-4px_rgba(59,113,202,0.5)] dark:hover:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)] dark:focus:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)] dark:active:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)]"
			>
				if op == constants.OP_CREATE {
					Create family
				} else {
					Update family
				}
			</button>
			// Cancel
			<button
				hx-get={ constants.ROUTE_FAMILIES }
				hx-target="#families"
				hx-swap="outerHTML"
				type="button"
				data-te-ripple-init
				class="ml-2 inline-block rounded bg-primary px-4 pb-[5px] pt-[6px] text-xs font-medium uppercase leading-normal text-white shadow-[0_4px_9px_-4px_#3b71ca] transition duration-150 ease-in-out hover:bg-primary-600 hover:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] focus:bg-primary-600 focus:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] focus:outline-none focus:ring-0 active:bg-primary-700 active:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] dark:shadow-[0_4px_9px_-4px_rgba(59,113,202,0.5)] dark:hover:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)] dark:focus:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)] dark:active:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)]"
			>
				Cancel
			</button>
		</div>
	</form>
	// Error message
	if vctx.ViewError.Err != nil && vctx.ViewError.ErrType == ErrTypeOnCreate {
		<div class="mb-4">
			<div class="block text-red-600 text-xs">{ vctx.ViewError.Err.Error() }</div>
		</div>
	}
}

//--------------------------------------------------------------------------------
// Confirm dialogs

script familyDeleteConfirm(familyUUID string) {
	msg = "Are you sure you want to delete the family?";
	Swal.fire({
		title: 'Delete family',
		showCancelButton: true,
		text: msg,
	})
	.then(function(result){
		if(result.isConfirmed){
			htmx.trigger("#delete-"+familyUUID, "confirmed");
		}
	})
}
