package view

import (
	"fmt"
	"strconv"
	"github.com/michelemendel/dmtmms/entity"
	"github.com/michelemendel/dmtmms/constants"
	"github.com/michelemendel/dmtmms/util"
	"github.com/michelemendel/dmtmms/filter"
	"strings"
)

templ (vctx *ViewCtx) Members(members []entity.Member, groups []entity.Group, f *filter.Filter) {
	if ctx.Value(constants.CTX_IS_XHR_KEY).(bool) {
		@vctx.MembersPage(members, groups, f)
	} else {
		@vctx.AppRoot() {
			@vctx.MembersPage(members, groups, f)
		}
	}
}

templ (vctx *ViewCtx) MembersPage(members []entity.Member, groups []entity.Group, f *filter.Filter) {
	<div id="members">
		// Placeholder
		<div id="memberForm">
			// Needed for the JavaScript to work
			<div id="closeMemberForm"></div>
		</div>
		// 
		<div class="flex flex-row px-4 py-5">
			<div class="w-4/5">
				// Filter bar, download form, latest updates
				<div id="filterbar" class="flow-root">
					<div class="float-left">
						@vctx.FilterBar(f, groups)
					</div>
					<div class="float-right">
						<div class="grid grid-cols-1 gap-2 grid-flow-row">
							if vctx.Session.IsAuthorized(ctx.Value(constants.CTX_USER_ROLE_KEY).(string) , constants.ROUTE_DOWNLOAD) {
								<div class="ml-0">
									@vctx.DownloadForm(f)
								</div>
							}
							if vctx.Session.IsAuthorized(ctx.Value(constants.CTX_USER_ROLE_KEY).(string) , constants.ROUTE_MEMBER_CREATE) {
								<div class="">
									@vctx.AddMemberButton()
								</div>
							}
							<div class="">
								@vctx.NLatestUpdatesButton()
							</div>
						</div>
					</div>
				</div>
				// Table
				<div id="table" class="mt-2">
					@vctx.MembersTable(members, f)
				</div>
			</div>
			// Member details placeholder
			<div class="w-1/5 px-4 mt-[9rem]">
				<div id="memberDetails"></div>
			</div>
		</div>
		@vctx.Footer()
		@jsFunctions()
	</div>
}

templ (vctx *ViewCtx) FilterBar(f *filter.Filter, groups []entity.Group) {
	<form>
		<div id="filterBar" class="flex flex-col">
			<div class="flex flex-row">
				<div>
					@Input("searchterms", f.SearchTerms, "search", "search", false, false, entity.InputError{})
				</div>
				<div class="ml-2">
					@vctx.FilterSelectGroups("selectedGroup", f.SelectedGroup, groups2Strings(groups))
				</div>
				<div class="ml-2">
					@vctx.FilterSelectStatuses("selectedStatus", f.SelectedStatus, vctx.MemberStatuses)
				</div>
				// booleans
				<div class="mt-1 flex flex-row">
					<div class="ml-4">
						@CBElement("receiveEmail", "Email", f.ReceiveEmail)
					</div>
					<div class="ml-2">
						@CBElement("receiveMail", "Mail", f.ReceiveMail)
					</div>
					<div class="ml-2">
						@CBElement("receiveHatikvah", "Hatikvah", f.ReceiveHatikvah)
					</div>
				</div>
			</div>
			<div class="flex flex-row mt-2">
				<div class="ml-0">
					@DatePicker("from", f.From, "From")
				</div>
				<div class="ml-2">
					@DatePicker("to", f.To, "To")
				</div>
				<div class="ml-2">
					@vctx.FilterSelectAges("selectedAges", "or use (school) ages", f.SelectedAges)
				</div>
				// Search button
				// keyCode==13 is the Enter key
				<div class="ml-[1rem]">
					<button
						hx-get={ constants.ROUTE_MEMBERS }
						hx-target="#members"
						hx-swap="outerHTML"
						hx-push-url="true"
						hx-trigger="keyup[keyCode==13]"
						class={ ButtonClass }
					>
						Search
					</button>
				</div>
				// Clear button
				<div class="ml-2">
					<button
						hx-get={ constants.ROUTE_MEMBERS }
						hx-target="#main"
						hx-swap="innerHTML"
						hx-push-url="true"
						class={ ButtonClass }
					>
						Clear
					</button>
				</div>
			</div>
		</div>
		@CBInit([]checkbox{
			{ID: "receiveEmail", Val: f.ReceiveEmail},
			{ID: "receiveMail", Val: f.ReceiveMail},
			{ID: "receiveHatikvah", Val: f.ReceiveHatikvah},
		})
		@CBOnClick([]string{"receiveEmail", "receiveMail", "receiveHatikvah"})
	</form>
}

type checkbox struct {
	ID  string
	Val string
}

// For alternatives with icons, see input.css
templ CBElement(id, label, val string) {
	<div class="flex items-center">
		<input checked type="checkbox" id={ id } name={ id } value={ val }/>
		<label for={ id } class="ml-1 text-sm font-light">{ label }</label>
	</div>
}

script CBInit(cbs []checkbox) {
	for(let i=0; i<cbs.length; i++) {
		classBase = "absolute h-4 w-4 relative peer shrink-0 appearance-none rounded-sm checked:bg-none focus:ring-1 hover:ring-1  "
		classOff = classBase + "checked:text-white checked:bg-white checked:border-1 checked:border-gray-500"
		classInclude = classBase + "checked:text-green-600 checked:bg-green-600"
		classExclude = classBase + "checked:text-red-600 checked:bg-red-600"
		let checkbox = document.getElementById(cbs[i].ID);
		if (cbs[i].Val == "") {
			checkbox.setAttribute("class", classOff)
		} else if (cbs[i].Val == "1") {
			checkbox.setAttribute("class", classInclude)
		} else if (cbs[i].Val == "0") {
			checkbox.setAttribute("class", classExclude)
		}
	}
}

script CBOnClick(ids []string) {
	for(let id of ids) {
		let checkbox = document.getElementById(id);
		checkbox.addEventListener('change', function () {
			checkbox.checked = true;
			if (checkbox.value == "") {			
				checkbox.value = "1";
				checkbox.setAttribute("class", classInclude);
			} else if (checkbox.value == "1"){
				checkbox.value = "0";
				checkbox.setAttribute("class", classExclude);
			} else if (checkbox.value == "0"){
				checkbox.value = "";
				checkbox.setAttribute("class", classOff);
			}
		});
	}
}

templ (vctx *ViewCtx) DownloadForm(f *filter.Filter) {
	<select
		id="download"
		class="bg-gray-50 border border-gray-300 text-gray-900 text-xs leading-[1.2] rounded focus:ring-blue-500 focus:border-blue-500 block w-full dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
	>
		<option>Download</option>
		<option value={ f.URLForDownloadLink("csv") }>CSV</option>
		<option value={ f.URLForDownloadLink("fnr") }>Fødselsnummer</option>
		<option value={ f.URLForDownloadLink("emails") }>Emails</option>
	</select>
}

templ (vctx *ViewCtx) AddMemberButton() {
	<button
		id="openMemberForm"
		hx-get={ constants.ROUTE_MEMBER_CREATE }
		hx-target="#memberForm"
		hx-select="#memberForm"
		hx-swap="outerHTML"
		hx-push-url="false"
		class={ ButtonClassFullWidth }
	>Add member</button>
}

templ (vctx *ViewCtx) NLatestUpdatesButton() {
	// N latest button
	<button
		hx-get={ constants.ROUTE_MEMBERS + "?nlatest=5" }
		hx-target="#members"
		hx-swap="outerHTML"
		hx-push-url="true"
		class={ ButtonClassFullWidth }
	>5 latest updates</button>
}

templ (vctx *ViewCtx) MembersTable(members []entity.Member, f *filter.Filter) {
	<div class="flex flex-grow overflow-y-scroll flex-col max-h-[50rem]">
		<table class="w-full text-left text-sm font-light">
			@vctx.memberTableHead(members, f)
			@vctx.memberTableBody(members, f)
		</table>
	</div>
	// Currently in lab mode
	// @tableNavigation(f.MemberUUID)
}

templ (vctx *ViewCtx) memberTableHead(members []entity.Member, f *filter.Filter) {
	<thead class="border-1 font-medium dark:border-neutral-500">
		<tr class="sticky top-0 py-2 text-slate-200 bg-blue-600">
			// Table header member's data
			for _, col := range []string{"ID", "Family", "Name", "Fødselsnr", "Age", "SynagSeat", "RecEmail", "RecMail", "RecHatikvah" } {
				// Link to sort
				<th
					hx-get={ constants.ROUTE_MEMBERS + f.URLQuery(col, "true") }
					hx-target="#members"
					hx-select="#members"
					hx-swap="outerHTML"
					hx-push-url="true"
					class="pl-4 py-2 text-slate-200 cursor-pointer"
				>
					{ col }
					if f.SortCol == col {
						if f.SortOrder == "ASC" {
							<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-4 h-4 inline-block">
								<path stroke-linecap="round" stroke-linejoin="round" d="M5 15l7-7 7 7"></path>
							</svg>
						} else {
							<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" class="w-4 h-4 inline-block">
								<path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7"></path>
							</svg>
						}
					} else {
						// To keep the width of the header cells the same with and without the sort icon
						<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="0" stroke="currentColor" class="w-4 h-4 inline-block">
							<path stroke-linecap="round" stroke-linejoin="round" d="M19 9l-7 7-7-7"></path>
						</svg>
					}
				</th>
			}
			// Count
			<th scope="col" class="py-2 text-slate-200 text-right italic text-sm font-normal">count:</th>
			<th scope="col" class="pr-2 py-2 text-slate-200 italic text-sm font-normal">{ fmt.Sprint(len(members)) }</th>
		</tr>
	</thead>
}

// Includes link to click on a member to show the member's details
templ (vctx *ViewCtx) memberTableBody(members []entity.Member, f *filter.Filter) {
	<tbody>
		for i, member := range members {
			<tr
				tabindex={ strconv.Itoa(i + 1) }
				id={ "member-" + member.UUID }
				hx-get={ constants.ROUTE_MEMBER_DETAILS + "?muuid=" + member.UUID }
				hx-target="#memberDetails"
				hx-swap="outerHTML"
				hx-push-url="false"
				hx-trigger="click"
				if member.UUID == f.MemberUUID {
					class="border-b dark:border-neutral-500 focus:bg-blue-100 hover:bg-neutral-100 cursor-pointer bg-blue-100"
				} else {
					class="border-b dark:border-neutral-500 focus:bg-blue-100 hover:bg-neutral-100 cursor-pointer"
				}
			>
				@vctx.memberTableRow(member)
				@vctx.memberTableRowButtons(member)
			</tr>
		}
	</tbody>
}

templ (vctx *ViewCtx) memberTableRow(member entity.Member) {
	<td class="whitespace-nowrap pl-4 py-4 font-medium">{ util.Int2String(member.ID) }</td>
	<td class="whitespace-nowrap pl-4 py-4">{ member.FamilyName }</td>
	<td class="whitespace-nowrap pl-4 py-4">{ member.Name }</td>
	<td class="whitespace-nowrap pl-4 py-4">{ strings.Replace(util.Date2String(member.DOB),"-","",-1) +"-"+ member.Personnummer }</td>
	<td class="whitespace-nowrap pl-4 py-4">{ fmt.Sprint(member.Age) }</td>
	<td class="whitespace-nowrap pl-4 py-4">{ member.Synagogueseat }</td>
	<td class="whitespace-nowrap pl-4 py-4 font-bold">{ bool2string(member.ReceiveEmail) }</td>
	<td class="whitespace-nowrap pl-4 py-4 font-bold">{ bool2string(member.ReceiveMail) }</td>
	<td class="whitespace-nowrap pl-4 py-4 font-bold">{ bool2string(member.ReceiveHatikvah) }</td>
}

func bool2string(b bool) string {
	if b {
		return "✓"
	}
	return ""
}

templ (vctx *ViewCtx) memberTableRowButtons(member entity.Member) {
	// Update member
	if vctx.Session.IsAuthorized(ctx.Value(constants.CTX_USER_ROLE_KEY).(string) , constants.ROUTE_MEMBER_UPDATE) {
		<td
			id={ "update-" + member.UUID }
			hx-get={ constants.ROUTE_MEMBER_UPDATE + "/" + member.UUID }
			hx-target="#memberForm"
			hx-select="#memberForm"
			hx-swap="outerHTML"
			hx-push-url="false"
			hx-trigger="click consume"
			class="w-3 font-medium cursor-pointer whitespace-nowrap px-2 py-4"
		>
			// Update icon
			<span class="[&>svg]:w-5">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10"></path>
				</svg>
			</span>
		</td>
	}
	// Delete member
	if vctx.Session.IsAuthorized(ctx.Value(constants.CTX_USER_ROLE_KEY).(string) , constants.ROUTE_MEMBER_DELETE) {
		<td
			id={ "delete-" + member.UUID }
			hx-delete={ constants.ROUTE_MEMBER_DELETE + "/" + member.UUID }
			hx-target="#members"
			hx-select="#members"
			hx-swap="outerHTML"
			hx-trigger="confirmed"
			hx-push-url="false"
			onClick={ ConfirmDialog("#delete-"+member.UUID, "Delete member", "Are you sure you want to delete this member?") }
			class="w-3 font-medium cursor-pointer whitespace-nowrap px-2 py-4"
		>
			// Delete icon
			<span class="[&>svg]:w-5">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0"></path>
				</svg>
			</span>
		</td>
	}
}

//--------------------------------------------------------------------------------
// Helpers

script jsFunctions() {
	// Focus on search input
	let search = document.getElementById("searchterms");
	val = search.value;

	document.addEventListener("keydown", (e) => {
		if (event.key == "k" && event.ctrlKey == true) {
			search.focus();
		}  
    });
	
	document.addEventListener("keydown", (e) => {
		if (event.key == "l" && event.ctrlKey == true) {			
			search.value = val;
		}  
    });

	var download = document.querySelector('#download');
	download.addEventListener('change', function () {
    	var url = this.value;
       	window.open(url, '_self');
	});
}

script tableNavigation(muuid string) {
	// Trying keyboard navigation
	// Currently in lab mode
	let table = document.querySelector('body');
	let tbody = table.querySelector('tbody');
	let rows = tbody.querySelectorAll('tr');
	// let selectedRow = null;
	let selectedID = "member-" + muuid;
	console.log("SEL_ID", selectedID)

	table.addEventListener('keydown', (e) => {
		if (e.key === 'ArrowDown' || e.key === 'ArrowUp') {
			e.preventDefault();
			// console.log(e.key, ", ROW", selectedRow.id)
			let index = Array.from(rows).indexOf(selectedRow);
			if (index === -1) {
				index = 0;
			}
			if (e.key === 'ArrowDown') {
				index = Math.min(index + 1, rows.length - 1);
			} else {
				index = Math.max(index - 1, 0);
			}
			selectedRow = rows[index];
			selectedRow.focus();
		}
	});
	
	// table.addEventListener('click', (e) => {
	// 	console.log(e.target.tagName)
	// 	if (e.target.tagName === 'TD') {
	// 		selectedRow = e.target.parentElement;
	// 		selectedRow.focus();
	// 		console.log(selectedRow.id);
	// 	}
	// });
}

func groups2Strings(groups []entity.Group) []string {
	groupsAsStrings := []string{"All groups"}
	for _, g := range groups {
		groupsAsStrings = append(groupsAsStrings, g.Name)
	}
	return groupsAsStrings
}
