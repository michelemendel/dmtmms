package view

import "fmt"

import (
	// "github.com/michelemendel/dmtmms/constants"
	"github.com/michelemendel/dmtmms/entity"
	"github.com/michelemendel/dmtmms/constants"
	"github.com/michelemendel/dmtmms/util"
	"github.com/michelemendel/dmtmms/filter"
	"strings"
)

templ (vctx *ViewCtx) Members(members []entity.Member, memberDetails []entity.MemberDetail, groups []entity.Group, f filter.Filter) {
	if ctx.Value(constants.CTX_IS_XHR_KEY).(bool) {
		@vctx.MembersPage(members, memberDetails, groups, f)
	} else {
		@vctx.AppRoot("") {
			@vctx.MembersPage(members, memberDetails, groups, f)
		}
	}
}

templ (vctx *ViewCtx) MembersPage(members []entity.Member, memberDetails []entity.MemberDetail, groups []entity.Group, f filter.Filter) {
	<div id="members">
		// Placeholder
		<div id="memberForm">
			// Needed for the JavaScript to work
			<div id="closeMemberForm"></div>
		</div>
		// 
		<div class="flex flex-row px-4 py-5">
			<div class="w-4/5">
				<div class="flow-root">
					<div class="float-left">
						@vctx.FilterBar(f)
					</div>
					<div class="float-right flex flex-row">
						<div class="">
							@vctx.AddMemberButton()
						</div>
						<div class="ml-2">
							@vctx.DownloadForm(f.SearchTerms, f.From, f.To)
						</div>
					</div>
				</div>
				<div class="mt-2">
					@vctx.MembersTable(members, f.GroupUUID, f.From, f.To, f.SearchTerms)
				</div>
			</div>
			<div class="w-1/5 px-4 mt-10">
				@vctx.MemberDetails(memberDetails, groups)
			</div>
		</div>
		@vctx.Footer()
		@jsFunctions()
	</div>
}

templ (vctx *ViewCtx) FilterBar(f filter.Filter) {
	<form
		hx-get={ constants.ROUTE_MEMBERS }
		hx-include="[name='searchterms'], [name='from'], [name='to'], [name='receiveEmail']"
		hx-target="#members"
		hx-swap="outerHTML"
		hx-push-url="true"
		hx-trigger="keyup[keyCode==13]"
	>
		<div id="filterBar" class="flex flex-row">
			<div>
				@Input("searchterms", f.SearchTerms, "search", "search", false, false, entity.InputError{})
			</div>
			<div class="ml-2">
				@DatePicker("from", f.From, "From")
			</div>
			<div class="ml-2">
				@DatePicker("to", f.To, "To")
			</div>
			<div class="ml-2">
				@TheCB(f.ReceiveEmail)
			</div>
			// 
			<div class="flex items-center mr-4 mb-2">
				<input
					type="checkbox"
					id="A3-yes"
					name="A3-confirmation"
					value="yes"
					class="opacity-0 absolute h-8 w-8"
				/>
				<div class="bg-white border-2 rounded-md border-blue-400 w-8 h-8 flex flex-shrink-0 justify-center items-center mr-2 focus-within:border-blue-500">
					<svg
						class="fill-current hidden w-3 h-3 text-blue-600 pointer-events-none"
						version="1.1"
						viewBox="0 0 17 12"
						xmlns="http://www.w3.org/2000/svg"
					>
						<g fill="none" fill-rule="evenodd">
							<g transform="translate(-9 -11)" fill="#1F73F1" fill-rule="nonzero">
								<path d="m25.576 11.414c0.56558 0.55188 0.56558 1.4439 0 1.9961l-9.404 9.176c-0.28213 0.27529-0.65247 0.41385-1.0228 0.41385-0.37034 0-0.74068-0.13855-1.0228-0.41385l-4.7019-4.588c-0.56584-0.55188-0.56584-1.4442 0-1.9961 0.56558-0.55214 1.4798-0.55214 2.0456 0l3.679 3.5899 8.3812-8.1779c0.56558-0.55214 1.4798-0.55214 2.0456 0z"></path>
							</g>
						</g>
					</svg>
				</div>
				<label for="A3-yes" class="select-none">Yes</label>
			</div>
			// 
			<div class="ml-2">
				<button class={ ButtonClass }>
					Search
				</button>
			</div>
		</div>
		@Consts()
		@CBInit(f.ReceiveEmail)
		@Check()
	</form>
}

templ TheCB(val string) {
	<div class="flex items-center mr-4 mb-2">
		<input
			checked
			type="checkbox"
			id="receiveEmail"
			name="receiveEmail"
			value={ val }
		/>
		<div id="cbSVG" class="bg-white border-2 rounded-md border-blue-400 w-8 h-8 flex flex-shrink-0 justify-center items-center mr-2 focus-within:border-blue-500">
			<svg
				class="fill-current hidden w-3 h-3 text-blue-600 pointer-events-none"
				version="1.1"
				viewBox="0 0 17 12"
				xmlns="http://www.w3.org/2000/svg"
			>
				<g fill="none" fill-rule="evenodd">
					<g transform="translate(-9 -11)" fill="#1F73F1" fill-rule="nonzero">
						<path d="m25.576 11.414c0.56558 0.55188 0.56558 1.4439 0 1.9961l-9.404 9.176c-0.28213 0.27529-0.65247 0.41385-1.0228 0.41385-0.37034 0-0.74068-0.13855-1.0228-0.41385l-4.7019-4.588c-0.56584-0.55188-0.56584-1.4442 0-1.9961 0.56558-0.55214 1.4798-0.55214 2.0456 0l3.679 3.5899 8.3812-8.1779c0.56558-0.55214 1.4798-0.55214 2.0456 0z"></path>
					</g>
				</g>
			</svg>
		</div>
		<label
			for="receiveEmail"
			class="text-sm font-light"
		>Email</label>
	</div>
}

script Consts() {
	// classBase = "opacity-10 absolute h-8 w-8 relative peer shrink-0 appearance-none w-4 h-4 border-2 border-blue-500 rounded-sm bg-white mt-1 checked:border-0 "
	classBase = "opacity-10 absolute h-8 w-8 "
	classOff = classBase + "text-red-600 checked:bg-red-600"
	classInclude = classBase + "text-blue-600 checked:bg-blue-600"
	classExclude = classBase + "text-green-600 checked:bg-green-600"
	svgOff = ""
	svgInclude = ""
	svgExclude = ""
}

script CBInit(val string) {
	let checkbox = document.getElementById("receiveEmail");
		let cbSVG = document.getElementById("svgSVG");
	if (val == "") {
		checkbox.setAttribute("class", classOff)
		sbSVG.innerHTML = "";
	} else if (val == "1") {
		checkbox.setAttribute("class", classInclude)
		sbSVG.innerHTML = svgInclude;
	} else if (val == "0") {
		checkbox.setAttribute("class", classExclude)
		sbSVG.innerHTML = "";
	}
}

script Check() {
	let checkbox = document.getElementById("receiveEmail");
	let cbSVG = document.getElementById("svgSVG");
	checkbox.addEventListener('change', function () {
		checkbox.checked = true;
		if (checkbox.value == "") {			
			checkbox.value = "1";
			checkbox.setAttribute("class", classInclude);
			sbSVG.innerHTML = svgInclude;
		} else if (checkbox.value == "1"){
			checkbox.value = "0";
			checkbox.setAttribute("class", classExclude);
			sbSVG.innerHTML = "";
		} else if (checkbox.value == "0"){
			checkbox.value = "";
			checkbox.setAttribute("class", classOff);
			sbSVG.innerHTML = "";
		}
	});
}

templ (vctx *ViewCtx) AddMemberButton() {
	<button
		id="openMemberForm"
		hx-get={ constants.ROUTE_MEMBER_CREATE }
		hx-target="#memberForm"
		hx-select="#memberForm"
		hx-swap="outerHTML"
		hx-push-url="false"
		class={ ButtonClass }
	>Add member</button>
}

templ (vctx *ViewCtx) DownloadForm(searchTerms, from, to string) {
	<select
		id="download"
		class="bg-gray-50 border border-gray-300 text-gray-900 text-xs leading-[1.2] rounded focus:ring-blue-500 focus:border-blue-500 block w-full dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
	>
		<option>Download</option>
		<option value={ fmt.Sprintf("/download?searchterms=%s&from=%s&to=%s&t=%s", searchTerms, from, to, "csv") }>CSV</option>
		<option value={ fmt.Sprintf("/download?searchterms=%s&from=%s&to=%s&t=%s", searchTerms, from, to, "fnr") }>Fødselsnummer</option>
		<option value={ fmt.Sprintf("/download?searchterms=%s&from=%s&to=%s&t=%s", searchTerms, from, to, "emails") }>Emails</option>
	</select>
}

templ (vctx *ViewCtx) MembersTable(members []entity.Member, guuid, fromVal, toVal, searchterms string) {
	<div class="flex flex-grow overflow-y-scroll flex-col max-h-[50rem]">
		<table class="w-full text-left text-sm font-light">
			<thead class="border-1 font-medium dark:border-neutral-500">
				<tr class="sticky top-0 px-6 py-2 text-slate-200 bg-slate-500">
					<th scope="col" class="px-6 py-2 text-slate-200 bg-slate-500">#</th>
					<th scope="col" class="px-6 py-2 text-slate-200 bg-slate-500">Name</th>
					<th scope="col" class="px-6 py-2 text-slate-200 bg-slate-500">Fødselsnummer</th>
					<th scope="col" class="px-6 py-2 text-slate-200 bg-slate-500">Family</th>
					<th scope="col" class="px-6 py-2 text-slate-200 bg-slate-500">Email</th>
					<th scope="col" class="px-6 py-2 text-slate-200 bg-slate-500">Mail</th>
					<th scope="col" class="px-6 py-2 text-slate-200 bg-slate-500">Hatikvah</th>
					<th scope="col" class="px-6 py-2 text-slate-200 bg-slate-500"></th>
					<th scope="col" class="px-6 py-2 text-slate-200 bg-slate-500"></th>
					if vctx.Session.IsAuthorized(ctx.Value(constants.CTX_USER_ROLE_KEY).(string) , constants.ROUTE_MEMBER_DELETE) {
						<th scope="col" class="px-6 py-2 text-slate-200 bg-slate-500"></th>
					}
				</tr>
			</thead>
			<tbody>
				for _, member := range members {
					<tr
						id={ "member-" + member.UUID }
						hx-get={ constants.ROUTE_MEMBERS + "?muuid=" + member.UUID + "&guuid=" + guuid + "&from=" + fromVal + "&to=" + toVal + "&searchterms=" + searchterms }
						hx-target="#members"
						hx-select="#members"
						hx-swap="outerHTML"
						hx-push-url="true"
						hx-trigger="click"
						class="border-b dark:border-neutral-500 hover:bg-neutral-100 cursor-pointer"
					>
						@vctx.memberTableRowData(member)
						@vctx.memberTableRowButtons(member, guuid, fromVal, toVal, searchterms)
					</tr>
				}
			</tbody>
		</table>
	</div>
}

templ (vctx *ViewCtx) memberTableRowData(member entity.Member) {
	<td class="whitespace-nowrap px-6 py-4 font-medium">{ member.ID }</td>
	<td class="whitespace-nowrap px-6 py-4">{ member.Name }</td>
	<td class="whitespace-nowrap px-6 py-4">{ strings.Replace(util.Time2String(member.DOB),"-","",-1) +"-"+ member.Personnummer }</td>
	<td class="whitespace-nowrap px-6 py-4">{ member.FamilyName }</td>
	<td class="whitespace-nowrap px-6 py-4 font-bold">{ bool2string(member.ReceiveEmail) }</td>
	<td class="whitespace-nowrap px-6 py-4 font-bold">{ bool2string(member.ReceiveMail) }</td>
	<td class="whitespace-nowrap px-6 py-4 font-bold">{ bool2string(member.ReceiveHatikva) }</td>
}

func bool2string(b bool) string {
	if b {
		return "✓"
	}
	return ""
}

templ (vctx *ViewCtx) memberTableRowButtons(member entity.Member, guuid, fromVal, toVal, searchterms string) {
	// Update member
	<td
		id={ "update-" + member.UUID }
		hx-get={ constants.ROUTE_MEMBER_UPDATE + "/" + member.UUID }
		hx-target="#memberForm"
		hx-select="#memberForm"
		hx-swap="outerHTML"
		hx-push-url="false"
		hx-trigger="click consume"
		class="w-3 font-medium cursor-pointer whitespace-nowrap py-4"
	>
		<span class="[&>svg]:w-5">
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
				<path stroke-linecap="round" stroke-linejoin="round" d="m16.862 4.487 1.687-1.688a1.875 1.875 0 1 1 2.652 2.652L10.582 16.07a4.5 4.5 0 0 1-1.897 1.13L6 18l.8-2.685a4.5 4.5 0 0 1 1.13-1.897l8.932-8.931Zm0 0L19.5 7.125M18 14v4.75A2.25 2.25 0 0 1 15.75 21H5.25A2.25 2.25 0 0 1 3 18.75V8.25A2.25 2.25 0 0 1 5.25 6H10"></path>
			</svg>
		</span>
	</td>
	// Archive member
	<td
		id={ "archive-" + member.UUID }
		hx-delete={ constants.ROUTE_MEMBER_ARCHIVE + "/" + member.UUID }
		hx-target="#members"
		hx-select="#members"
		hx-swap="outerHTML"
		hx-trigger="confirmed"
		hx-push-url="false"
		onClick={ memberArchiveConfirm(member.UUID) }
		class="w-3 font-medium cursor-pointer whitespace-nowrap pl-2 py-4"
	>
		<span class="[&>svg]:w-5">
			<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
				<path stroke-linecap="round" stroke-linejoin="round" d="m20.25 7.5-.625 10.632a2.25 2.25 0 0 1-2.247 2.118H6.622a2.25 2.25 0 0 1-2.247-2.118L3.75 7.5M10 11.25h4M3.375 7.5h17.25c.621 0 1.125-.504 1.125-1.125v-1.5c0-.621-.504-1.125-1.125-1.125H3.375c-.621 0-1.125.504-1.125 1.125v1.5c0 .621.504 1.125 1.125 1.125Z"></path>
			</svg>
		</span>
	</td>
	// Delete member
	if vctx.Session.IsAuthorized(ctx.Value(constants.CTX_USER_ROLE_KEY).(string) , constants.ROUTE_MEMBER_DELETE) {
		<td
			id={ "delete-" + member.UUID }
			hx-delete={ constants.ROUTE_MEMBER_DELETE + "/" + member.UUID }
			hx-target="#members"
			hx-select="#members"
			hx-swap="outerHTML"
			hx-trigger="confirmed"
			hx-push-url="false"
			onClick={ memberDeleteConfirm(member.UUID) }
			class="w-3 font-medium cursor-pointer whitespace-nowrap pl-2 py-4"
		>
			<span class="[&>svg]:w-5">
				<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6 h-6">
					<path stroke-linecap="round" stroke-linejoin="round" d="m14.74 9-.346 9m-4.788 0L9.26 9m9.968-3.21c.342.052.682.107 1.022.166m-1.022-.165L18.16 19.673a2.25 2.25 0 0 1-2.244 2.077H8.084a2.25 2.25 0 0 1-2.244-2.077L4.772 5.79m14.456 0a48.108 48.108 0 0 0-3.478-.397m-12 .562c.34-.059.68-.114 1.022-.165m0 0a48.11 48.11 0 0 1 3.478-.397m7.5 0v-.916c0-1.18-.91-2.164-2.09-2.201a51.964 51.964 0 0 0-3.32 0c-1.18.037-2.09 1.022-2.09 2.201v.916m7.5 0a48.667 48.667 0 0 0-7.5 0"></path>
				</svg>
			</span>
		</td>
	}
}

// TODO: Refactor with memberDeleteConfirm

script memberArchiveConfirm(memberUUID string) {
	msg = "Are you sure you want to archive this member?";
	Swal.fire({
	title: 'Archive member',
	showCancelButton: true,
	text: msg,
	})
	.then(function(result){
    if(result.isConfirmed){
	htmx.trigger("#archive-"+memberUUID, "confirmed");
	}
	})
}

script memberDeleteConfirm(memberUUID string) {
	msg = "Are you sure you want to delete this member?";
	Swal.fire({
	title: 'Delete member',
	showCancelButton: true,
	text: msg,
	})
	.then(function(result){
    if(result.isConfirmed){
	// console.log('confirmed');
	htmx.trigger("#delete-"+memberUUID, "confirmed");
	}
	})
}

templ (vctx *ViewCtx) MemberDetails(memberDetails []entity.MemberDetail, groups []entity.Group) {
	<div
		id="memberDetails"
		class="px-2 py-2 block max-w-[18rem] rounded-lg bg-white text-left shadow-[0_2px_15px_-3px_rgba(0,0,0,0.07),0_10px_20px_-2px_rgba(0,0,0,0.04)] dark:bg-neutral-700"
	>
		if len(memberDetails) == 0 {
			<p class="text-sm italic">Click on a member to view details</p>
		} else {
			<ul class=" text-sm">
				for _, m := range memberDetails[3:] {
					if strings.TrimSpace(m.Value) != "" && strings.TrimSpace(m.Value) != constants.DATE_MIN {
						<li class="mt-1 text-xs font-semibold dark:border-opacity-50">{ m.Title } </li>
						<li class="pt-0.25 dark:border-opacity-50">{ m.Value } </li>
					}
				}
				<li class="text-xs font-semibold pt-2 dark:border-opacity-50">
					Family
				</li>
				<li
					hx-get={ constants.ROUTE_MEMBERS + "?muuid=" + memberDetails[0].Value + "&fuuid=" + memberDetails[1].Value }
					hx-target="#members"
					hx-select="#members"
					hx-swap="outerHTML"
					hx-push-url={ constants.ROUTE_MEMBERS + "?muuid=" + memberDetails[0].Value + "&fuuid=" + memberDetails[1].Value }
					class="w-full pt-0.25 text-sky-700 dark:border-opacity-50 cursor-pointer"
				>
					// Family name
					{ string(memberDetails[2].Value) }
				</li>
				<li class="text-xs font-semibold pt-2 dark:border-opacity-50">
					Groups	
				</li>
				<li class="pt-0.25 text-sky-700 dark:border-opacity-50 cursor-pointer">
					<ul class="text-sm">
						for _, group := range groups {
							<li
								hx-get={ constants.ROUTE_MEMBERS + "?muuid=" + memberDetails[0].Value + "&guuid=" + group.UUID }
								hx-target="#members"
								hx-select="#members"
								hx-swap="outerHTML"
								hx-push-url={ constants.ROUTE_MEMBERS + "?muuid=" + memberDetails[0].Value + "&guuid=" + group.UUID }
							>{ group.Name }</li>
						}
					</ul>
				</li>
			</ul>
		}
	</div>
}

//--------------------------------------------------------------------------------
// Helpers

script cl(msg string) {
	console.log(msg)
}

script jsFunctions() {
	// Focus on search input
	let search = document.getElementById("searchterms");
	val = search.value;

	document.addEventListener("keydown", (e) => {
		if (event.key == "k" && event.ctrlKey == true) {
			search.focus();
		}  
    });
	
	document.addEventListener("keydown", (e) => {
		if (event.key == "l" && event.ctrlKey == true) {			
			search.value = val;
		}  
    });

	// Download
	var download = document.querySelector('#download');
	download.addEventListener('change', function () {
    	var url = this.value;
    	if (url !== "Download") {        
       		window.open(url, '_self');
    	}
	    download.value = "Download";
	});
}
