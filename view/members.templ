package view

// import "github.com/michelemendel/dmtmms/constants"
import "github.com/michelemendel/dmtmms/entity"
import "github.com/michelemendel/dmtmms/constants"
import "github.com/michelemendel/dmtmms/util"

script cl(msg string) {
	console.log(msg)
}

templ (vctx *ViewCtx) Members(members []entity.Member, member entity.Member, groups []entity.Group) {
	@vctx.AppRoot("") {
		<div id="members" class="flex flex-row">
			// Members table
			<div class="basis-3/4 px-4 py-4">
				@vctx.MembersTable(members)
			</div>
			// Member details
			<div class="basis-1/4">
				@vctx.MemberDetails(member, groups)
			</div>
		</div>
	}
}

templ (vctx *ViewCtx) MembersTable(members []entity.Member) {
	@vctx.FilterBar()
	<div class="flex flex-col max-h-[50rem]">
		<div class="flex-grow overflow-auto">
			<table class="w-full text-left text-sm font-light">
				<thead class="border-b font-medium dark:border-neutral-500">
					<tr>
						<th scope="col" class="sticky top-0 px-6 py-2 text-slate-200 bg-slate-500">#</th>
						<th scope="col" class="sticky top-0 px-6 py-2 text-slate-200 bg-slate-500">Name</th>
						<th scope="col" class="sticky top-0 px-6 py-2 text-slate-200 bg-slate-500">DOB</th>
					</tr>
				</thead>
				<tbody>
					for _, member := range members {
						<tr
							id={ "member-" + member.UUID }
							hx-get={ constants.ROUTE_MEMBERS + "?muuid=" + member.UUID }
							hx-target="#members"
							hx-select="#members"
							hx-swap="outerHTML"
							hx-push-url="true"
							class="border-b dark:border-neutral-500 hover:bg-neutral-100 cursor-pointer"
						>
							<td class="whitespace-nowrap px-6 py-4 font-medium">{ member.ID }</td>
							<td class="whitespace-nowrap px-6 py-4">{ member.Name }</td>
							<td class="whitespace-nowrap px-6 py-4">{ util.Time2String(member.DOB) }</td>
						</tr>
					}
				</tbody>
			</table>
		</div>
	</div>
}

templ (vctx *ViewCtx) FilterBar() {
	<form>
		<div id="filterBar" class="flex flex-row">
			@DatePicker("from")
			@DatePicker("to")
			<button
				hx-get={ constants.ROUTE_MEMBERS }
				hx-include="[name='from'], [name='to']"
				hx-target="#members"
				hx-select="#members"
				hx-swap="outerHTML"
				hx-push-url="true"
				type="button"
				class="inline-block rounded bg-primary h-9 px-4 text-xs font-medium uppercase leading-normal text-white shadow-[0_4px_9px_-4px_#3b71ca] transition duration-150 ease-in-out hover:bg-primary-600 hover:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] focus:bg-primary-600 focus:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] focus:outline-none focus:ring-0 active:bg-primary-700 active:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.3),0_4px_18px_0_rgba(59,113,202,0.2)] dark:shadow-[0_4px_9px_-4px_rgba(59,113,202,0.5)] dark:hover:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)] dark:focus:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)] dark:active:shadow-[0_8px_9px_-4px_rgba(59,113,202,0.2),0_4px_18px_0_rgba(59,113,202,0.1)]"
			>
				Filter by dates
			</button>
		</div>
	</form>
}

templ (vctx *ViewCtx) MemberDetails(member entity.Member, groups []entity.Group) {
	<div id="memberGroupDetails">
		<div id="memberDetails" class="flex flex-col">
			if member.UUID == "" {
				<div>
					<p>Click on a member to view details</p>
				</div>
			} else {
				<div>
					<h2>{ member.UUID }</h2>
					<h2>{ member.Name }</h2>
					<p>{ member.Email }</p>
					<p>{ member.Mobile }</p>
					<p>{ util.Time2String(member.DOB) }</p>
					<p>{ string(member.Status) }</p>
				</div>
				<div id="groupsDetails" class="flex flex-col">
					<h2>Groups</h2>
					<ul>
						<h3>--Family</h3>
						for _, group := range groups {
							if group.Type == entity.GroupTypeFamily {
								<li
									hx-get={ constants.ROUTE_MEMBERS + "?guuid=" + group.UUID + "&muuid=" + member.UUID }
									hx-target="#members"
									hx-select="#members"
									hx-swap="outerHTML"
									hx-push-url={ constants.ROUTE_MEMBERS + "?guuid=" + group.UUID + "&muuid=" + member.UUID }
								>{ group.Name }</li>
							}
						}
						<h3>--Organization</h3>
						for _, group := range groups {
							if group.Type == entity.GroupTypeOrg {
								<li
									hx-get={ constants.ROUTE_MEMBERS + "?guuid=" + group.UUID + "&muuid=" + member.UUID }
									hx-target="#members"
									hx-select="#members"
									hx-swap={ "outerHTML" }
									hx-push-url={ constants.ROUTE_MEMBERS + "?guuid=" + group.UUID + "&muuid=" + member.UUID }
								>{ group.Name }</li>
							}
						}
					</ul>
				</div>
			}
		</div>
	</div>
}

templ DatePicker(fromTo string) {
	<div
		class="relative mb-3"
		data-te-datepicker-init
		data-te-input-wrapper-init
		id="datepicker-close-without-confirmation"
		data-te-inline="true"
		data-te-format="yyyy-mm-dd"
	>
		<input
			id={ fromTo }
			name={ fromTo }
			type="text"
			class="peer block min-h-[auto] w-full rounded border-0 bg-transparent px-3 py-[0.32rem] leading-[1.6] outline-none transition-all duration-200 ease-linear focus:placeholder:opacity-100 peer-focus:text-primary data-[te-input-state-active]:placeholder:opacity-100 motion-reduce:transition-none dark:text-neutral-200 dark:placeholder:text-neutral-200 dark:peer-focus:text-primary [&:not([data-te-input-placeholder-active])]:placeholder:opacity-0"
			placeholder={ fromTo + " (YYYY-MM-DD)" }
			data-te-datepicker-toggle-ref
			data-te-datepicker-toggle-button-ref
		/>
		<label
			for="floatingInput"
			class="pointer-events-none absolute left-3 top-0 mb-0 max-w-[90%] origin-[0_0] truncate pt-[0.37rem] leading-[1.6] text-neutral-500 transition-all duration-200 ease-out peer-focus:-translate-y-[0.9rem] peer-focus:scale-[0.8] peer-focus:text-primary peer-data-[te-input-state-active]:-translate-y-[0.9rem] peer-data-[te-input-state-active]:scale-[0.8] motion-reduce:transition-none dark:text-neutral-200 dark:peer-focus:text-primary"
		>{ fromTo } date</label>
	</div>
}
