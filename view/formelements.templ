package view

import (
	"github.com/michelemendel/dmtmms/constants"
	"github.com/michelemendel/dmtmms/entity"
)

templ Input(id, value, placeholder, label string, required, readonly bool, password ...string) {
	// <a href="https://flowbite.com/docs/forms/floating-label/">flowbite</a>
	<input
		if len(password) > 0 {
			type="password"
		} else {
			type="text"
		}
		id={ id }
		name={ id }
		class="block px-2.5 w-full text-xs leading-[0.5] text-gray-900 bg-transparent rounded border-1 border-gray-300 appearance-none dark:text-white dark:border-gray-600 dark:focus:border-blue-500 focus:outline-none focus:ring-0 focus:border-blue-600 peer"
		if required {
			required
		}
		if readonly {
			readonly
		}
		placeholder={ value }
		value={ value }
	/>
	<label
		for={ id }
		class="absolute text-xs text-gray-500 dark:text-gray-400 duration-100 transform -translate-y-4 scale-75 top-2 z-10 origin-[0] bg-white dark:bg-gray-900 px-2 peer-focus:px-2 peer-focus:text-blue-600 peer-focus:dark:text-blue-500 peer-placeholder-shown:scale-100 peer-placeholder-shown:-translate-y-1/2 peer-placeholder-shown:top-1/2 peer-focus:top-2 peer-focus:scale-75 peer-focus:-translate-y-4 rtl:peer-focus:translate-x-1/4 rtl:peer-focus:left-auto start-1"
	>
		{ label }
	</label>
}

templ InputPassword(id, value, placeholder, label string, required, readonly bool) {
	@Input(id, value, placeholder, label, required, readonly, "password")
}

templ DatePicker(id, val string) {
	<input
		type="date"
		id={ id }
		name={ id }
		if val == constants.DATE_MIN || val == constants.DATE_MAX {
			value=""
		}
		placeholder={ val }
		value={ val }
		class="peer block min-h-[auto] w-full rounded border-1 border-gray-300 bg-transparent px-3 py-[0.33rem] text-xs leading-[1.5] outline-none transition-all duration-200 ease-linear focus:placeholder:opacity-100 peer-focus:text-primary data-[te-input-state-active]:placeholder:opacity-100 motion-reduce:transition-none dark:text-neutral-200 dark:placeholder:text-neutral-200 dark:peer-focus:text-primary [&:not([data-te-input-placeholder-active])]:placeholder:opacity-0"
	/>
}

templ (vctx *ViewCtx) RoleOptions(selectedUser entity.User) {
	<div
		class="ml-2"
	>
		<select
			id="role"
			name="role"
			data-te-select-init
			data-te-select-size="sm"
			class="peer block min-h-[auto] w-full rounded border-0 bg-transparent px-3 py-[0.33rem] text-xs leading-[1.5] outline-none transition-all duration-200 ease-linear focus:placeholder:opacity-100 peer-focus:text-primary data-[te-input-state-active]:placeholder:opacity-100 motion-reduce:transition-none dark:text-neutral-200 dark:placeholder:text-neutral-200 dark:peer-focus:text-primary [&:not([data-te-input-placeholder-active])]:placeholder:opacity-0"
		>
			for _, role := range vctx.Roles {
				<option value={ role } selected?={ role == selectedUser.Role }>{ role }</option>
			}
		</select>
		<label data-te-select-label-ref>Role</label>
	</div>
}

// Select, dropdown
// https://tailwindcomponents.com/component/select-input-field
// https://tailwindcomponents.com/component/dropdown-with-input-inside-tailwind-css
templ (vctx *ViewCtx) SelectDD(id, label, selectedItem string, items []string) {
	<div class="flex flex-row">
		<label
			for={ id }
			class="inline-block align-baseline ml-2 mt-2 mr-[4px] text-xs font-medium text-gray-900 dark:text-gray-400"
		>{ label }</label>
		<select
			id={ id }
			name={ id }
			class="bg-gray-50 border border-gray-300 text-gray-900 text-xs leading-[1.2] rounded focus:ring-blue-500 focus:border-blue-500 block w-full dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
		>
			for _, item := range items {
				<option value={ item } selected?={ item == selectedItem }>{ item }</option>
			}
		</select>
	</div>
}
