package view

import (
	"github.com/michelemendel/dmtmms/constants"
	"github.com/michelemendel/dmtmms/entity"
	"github.com/michelemendel/dmtmms/util"
)

templ (vctx *ViewCtx) MemberFormModal(member entity.Member, selectedGroups []string, families []entity.Family, groups []entity.Group, op string, inputErrors entity.InputErrors) {
	<div
		id="memberForm"
		class="fixed z-20 inset-0 overflow-y-auto"
	>
		<div class="flex items-center justify-center min-h-screen bg-gray-300 bg-opacity-40">
			<div class="bg-white w-1/2 p-6 rounded shadow-md">
				<div class="flex justify-end">
					<!-- Close Button -->
					<button id="closeMemberForm" class="text-gray-700 hover:text-red-500">
						<svg
							class="w-6 h-6"
							fill="none"
							stroke="currentColor"
							viewBox="0 0 24 24"
							xmlns="http://www.w3.org/2000/svg"
						>
							<path
								stroke-linecap="round"
								stroke-linejoin="round"
								stroke-width="2"
								d="M6 18L18 6M6 6l12 12"
							></path>
						</svg>
					</button>
				</div>
				<h2 class="text-lg font-bold text-gray-900">
					if op == "create" {
						Add Member
					} else {
						Update Member
					}
				</h2>
				// --------------------------------------------------------------------------------
				// Form
				<form>
					// id
					<div class="mt-2">
						@Input("id", member.ID, "", "Id", false, false, inputErrors["id"])
					</div>
					// name
					<div class="mt-2">
						@Input("name", member.Name, "", "Name", true, false, inputErrors["name"])
					</div>
					// email
					<div class="mt-2">
						@InputEmail("email", member.Email, "", "Email", false, false, inputErrors["email"])
					</div>
					// phone
					<div class="mt-2">
						@Input("mobile", member.Mobile, "", "Phone", false, false, inputErrors["mobile"])
					</div>
					// DOB + personnummer
					<div class="mt-2 flex flex-row">
						<div>
							if member.DOB.IsZero() {
								@DatePicker("dob", "", "DOB")
							} else {
								@DatePicker("dob", util.Time2String(member.DOB), "DOB")
							}
						</div>
						<div class="ml-2 w-[60px]">
							@Input("personnummer", member.Personnummer, "", "PN", false, false, inputErrors["personnummer"])
						</div>
					</div>
					// address
					<div class="mt-2">
						<div class="">
							@Input("address1", member.Address1, "", "Address1", false, false, inputErrors["address1"])
						</div>
						<div class="mt-1">
							@Input("address2", member.Address2, "", "Address2", false, false, inputErrors["address2"])
						</div>
						<div class="mt-1 flex flex-row">
							<div class="w-[160px]">
								@Input("postnummer", member.Postnummer, "", "Postnummer", false, false, inputErrors["postnummer"])
							</div>
							<div class="ml-2 w-[80px]">
								@Input("poststed", member.Poststed, "", "Poststed", false, false, inputErrors["poststed"])
							</div>
						</div>
					</div>
					// synagogue_seat
					<div class="mt-2">
						@Input("synagogue_seat", member.Synagogueseat, "", "Synagogue seat", false, false, inputErrors["synagogue_seat"])
					</div>
					// membership_fee_tier
					<div class="mt-2">
						@Input("membership_fee_tier", member.MembershipFeeTier, "", "Membership fee tier", false, false, inputErrors["membership_fee_tier"])
					</div>
					// registered_date 
					<div class="mt-2">
						if member.RegisteredDate.IsZero() {
							@DatePicker("registered_date", "", "Reg.date")
						} else {
							@DatePicker("registered_date", util.Time2String(member.RegisteredDate), "Reg.date")
						}
					</div>
					// deregistered_date 
					<div class="mt-2">
						if member.DeregisteredDate.IsZero() {
							@DatePicker("deregistered_date", "", "Dereg.date")
						} else {
							@DatePicker("deregistered_date", util.Time2String(member.RegisteredDate), "Dereg.date")
						}
					</div>
					// receive_email
					<div class="mt-2">
						@Checkbox("receive_email", member.ReceiveEmail, "Receive email", false)
					</div>
					// receive_mail
					<div class="mt-1">
						@Checkbox("receive_mail", member.ReceiveMail, "Receive mail", false)
					</div>
					// receive_hatikva
					<div class="mt-1">
						@Checkbox("receive_hatikvah", member.ReceiveHatikva, "Receive Hatikvah", false)
					</div>
					// status
					<div class="mt-2">
						@vctx.Select("status", string(member.Status), "Status", vctx.MemberStatuses)
					</div>
					// family_name (family_uuid)
					<div class="mt-2">
						@vctx.SelectFamilies("family_uuid", "Family", member.FamilyUUID, families)
					</div>
					// groups (groups uuid)
					<div class="mt-2">
						@vctx.SelectGroups("groups", "Groups", selectedGroups, groups)
					</div>
					// 
					// --------------------------------------------------------------------------------
					// Button
					<div class="mt-4">
						<button
							if op == "create" {
								hx-post={ constants.ROUTE_MEMBER_CREATE }
							} else {
								hx-put={ constants.ROUTE_MEMBER_UPDATE }
							}
							hx-target="#members"
							hx-swap="outerHTML"
							type="button"
							class={ ButtonClass }
						>
							if op == "create" {
								Add
							} else {
								Update
							}
						</button>
					</div>
				</form>
				// Error message
				if inputErrors["form"].Err != nil {
					<div id="form" class="mb-4">
						<div class="block text-red-600 text-xs">{ inputErrors["form"].Err.Error() }</div>
					</div>
				}
			</div>
		</div>
		<script>
			var memberForm = document.getElementById('memberForm');
			var closeMemberFormButton = document.getElementById('closeMemberForm');
			closeMemberFormButton.addEventListener('click', () => {
				memberForm.classList.add('hidden');
			});
		</script>
	</div>
}
