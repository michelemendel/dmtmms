package view

import (
	"github.com/michelemendel/dmtmms/constants"
	"github.com/michelemendel/dmtmms/entity"
)

templ (vctx *ViewCtx) Users(users []entity.User, selectedUser entity.User, op string, showNavbar bool) {
	@vctx.AppRoot("", showNavbar) {
		<div id="users">
			@vctx.UserFormSelectType(selectedUser, op)
			@vctx.UserList(users)
		</div>
	}
}

templ (vctx *ViewCtx) UserFormSelectType(selectedUser entity.User, op string) {
	<div id="userEdit">
		if op == constants.OP_CREATE {
			@vctx.UserCreateForm(selectedUser)
		} else {
			@vctx.UserUpdateForm(selectedUser)
		}
	</div>
}

templ (vctx *ViewCtx) UserCreateForm(selectedUser entity.User) {
	<div id="userForm">
		<form
			hx-post={ constants.ROUTE_USER_CREATE }
			hx-target="#users"
			hx-swap="outerHTML"
		>
			<input type="text" required name="username" value={ selectedUser.Name } placeholder="name"/>
			<input type="text" required name="password" placeholder="password"/>
			@vctx.roleOptions(selectedUser)
			<input type="submit" value="Add User"/>
			<input
				hx-get={ constants.ROUTE_USERS_INTERNAL }
				hx-target="#users"
				hx-swap="innerHTML"
				type="submit"
				value="Cancel"
			/>
		</form>
		if vctx.Err != nil {
			<div class="mb-4">
				<div class="block text-red-600">{ vctx.Err.Error() }</div>
			</div>
		}
	</div>
}

templ (vctx *ViewCtx) UserUpdateForm(selectedUser entity.User) {
	<div>
		<form
			hx-put={ constants.ROUTE_USER_UPDATE }
			hx-target="#users"
			hx-swap="innerHTML"
		>
			<input type="hidden" name="username" value={ selectedUser.Name }/>
			<span>{ selectedUser.Name }</span>
			@vctx.roleOptions(selectedUser)
			<input type="submit" value="Update User"/>
			<input
				hx-get={ constants.ROUTE_USERS_INTERNAL }
				hx-target="#users"
				hx-swap="innerHTML"
				type="submit"
				value="Cancel"
			/>
		</form>
	</div>
}

templ (vctx *ViewCtx) roleOptions(selectedUser entity.User) {
	<label for="role">Role</label>
	<select name="role" id="role">
		for _, role := range vctx.Roles {
			<option value={ role } selected?={ role == selectedUser.Role }>{ role }</option>
		}
	</select>
}

templ (vctx *ViewCtx) UserList(users []entity.User) {
	<ul>
		for _, user := range users {
			<li>
				<span>
					{ user.Name }
				</span>
				<span>
					{ user.Role }
				</span>
				<span
					hx-get={ constants.ROUTE_USER_UPDATE + "/" + user.Name }
					hx-target="#users"
					hx-swap="innerHTML"
				>
					Edit
				</span>
				// Don't show delete and reset password for the current user
				if user.Name != ctx.Value(constants.CTX_USER_NAME_KEY).(string) {
					<span
						id={ "delete-" + user.Name }
						hx-delete={ constants.ROUTE_USER_DELETE + "/" + user.Name }
						hx-target="#users"
						hx-swap="innerHTML"
						hx-trigger="confirmed"
						onClick={ deleteConfirm(user.Name) }
					>
						Delete
					</span>
					<span
						id={ "resetPW-" + user.Name }
						hx-get={ constants.ROUTE_USER_RESET_PW + "/" + user.Name }
						hx-target="#users"
						hx-swap={ "innerHTML" }
						hx-trigger="confirmed"
						onClick={ resetPWConfirm(user.Name) }
					>
						Reset password
					</span>
					if vctx.TempPassword != "" && vctx.TempPasswordUserName == user.Name {
						<span>
							The password { vctx.TempPassword } has been copied to the clipboard
							@copyToClipboard(vctx.TempPassword)
						</span>
					}
				}
			</li>
		}
	</ul>
}

script copyToClipboard(txt string) {
	navigator.clipboard.writeText(txt);
}

script deleteConfirm(username string) {
	msg = "Are you sure you want to delete the user? This action cannot be undone.";
	Swal.fire({
		title: 'Delete user',
		showCancelButton: true,
		text: msg,
		})
		.then(function(result){
        if(result.isConfirmed){
			// console.log('confirmed');
			htmx.trigger("#delete-"+username, "confirmed");
		}
	})
}

script resetPWConfirm(username string) {
	msg = "By clicking ok, the password will be reset. The password will be copied for you to send to the user. You will not be able to see the password again.";
	Swal.fire({
		title: 'Reset password',
		showCancelButton: true,
		text: msg,
		})
		.then(function(result){
        if(result.isConfirmed){
			// console.log('confirmed');
			htmx.trigger("#resetPW-"+username, "confirmed");
		}
	})
}
